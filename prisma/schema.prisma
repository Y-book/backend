generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  firstname             String                @db.VarChar(100)
  lastname              String                @db.VarChar(100)
  email                 String                @unique
  avatarS3Key           String                @db.VarChar(255)
  coverPicS3Key         String                @db.VarChar(255)
  config                Json?
  conversationsSent     Conversation[]        @relation("ConversationsSent")
  conversationsReceived Conversation[]        @relation("ConversationsReceived")
  conversationMessages  ConversationMessage[]
  fromFriendship        Friendship[]          @relation("FromFriendship")
  toFrienship           Friendship[]          @relation("ToFriendship")
  posts                 Post[]
  postComment           PostComment[]
  postLikes             PostLike[]
  User_A                User[]                @relation("UserBlocks")
  User_B                User[]                @relation("UserBlocks")
}

model Post {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  htmlContent     String
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  postAttachments PostAttachment[]
  postComments    PostComment[]
  postLikes       PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PostComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PostAttachment {
  id     Int          @id @default(autoincrement())
  type   DocumentType
  s3Key  String       @db.VarChar(255)
  postId Int
  post   Post         @relation(fields: [postId], references: [id])
}

model Friendship {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  status       FriendshipStatus @default(PENDING)
  fromId       Int
  toId         Int
  from         User             @relation("FromFriendship", fields: [fromId], references: [id])
  to           User             @relation("ToFriendship", fields: [toId], references: [id])
  notification Notification[]
}

model Conversation {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  fromId    Int
  toId      Int?
  from      User                  @relation("ConversationsSent", fields: [fromId], references: [id])
  to        User?                 @relation("ConversationsReceived", fields: [toId], references: [id])
  messages  ConversationMessage[]
}

model ConversationMessage {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  conversationId Int?
  userId         Int
  conversation   Conversation?  @relation(fields: [conversationId], references: [id])
  from           User           @relation(fields: [userId], references: [id])
  notification   Notification[]
}

model Notification {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  read                  Boolean              @default(false)
  friendshipId          Int?
  conversationMessageId Int?
  message               ConversationMessage? @relation(fields: [conversationMessageId], references: [id])
  friendship            Friendship?          @relation(fields: [friendshipId], references: [id])
}

enum DocumentType {
  PICTURE
  SOUND
  VIDEO
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  IGNORED
}
